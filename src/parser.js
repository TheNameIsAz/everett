// Generated by PEG.js v0.11.0-master.0b102d2, https://pegjs.org/

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  // istanbul ignore next
  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    },

    not: function(expectation) {
      return "not " + describeExpectation(expectation.expected);
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleFunctions = { Scenario: peg$parseScenario };
  var peg$startRuleFunction = peg$parseScenario;

  var peg$c0 = "showText";
  var peg$c1 = "switch";
  var peg$c2 = "variable";
  var peg$c3 = "set";
  var peg$c4 = "add";
  var peg$c5 = "subtract";
  var peg$c6 = "multiply";
  var peg$c7 = "divide";
  var peg$c8 = "modulo";
  var peg$c9 = "random";
  var peg$c10 = "nthMemberID";
  var peg$c11 = "tintScreen";
  var peg$c12 = "flashScreen";
  var peg$c13 = "shakeScreen";
  var peg$c14 = "showPicture";
  var peg$c15 = "movePicture";
  var peg$c16 = "rotatePicture";
  var peg$c17 = "tintPicture";
  var peg$c18 = "weather";
  var peg$c19 = "playMovie";
  var peg$c20 = "changeBackground";
  var peg$c21 = "fadeoutScreen";
  var peg$c22 = "fadeinScreen";
  var peg$c23 = "saveBGM";
  var peg$c24 = "resumeBGM";
  var peg$c25 = "stopSE";
  var peg$c26 = "save";
  var peg$c27 = "gameOver";
  var peg$c28 = "returnToTitle";
  var peg$c29 = "wait";
  var peg$c30 = "erasePicture";
  var peg$c31 = "fadeoutBGM";
  var peg$c32 = "fadeoutBGS";
  var peg$c33 = "playBGM";
  var peg$c34 = "playBGS";
  var peg$c35 = "playME";
  var peg$c36 = "playSE";
  var peg$c37 = "force:";
  var peg$c38 = "speed:";
  var peg$c39 = "none";
  var peg$c40 = "\u306A\u3057";
  var peg$c41 = "scale:";
  var peg$c42 = "opacity:";
  var peg$c43 = "blend:";
  var peg$c44 = "loopX:";
  var peg$c45 = "loopY:";
  var peg$c46 = "volume:";
  var peg$c47 = "pitch:";
  var peg$c48 = "pan:";
  var peg$c49 = ":";
  var peg$c50 = "duration:";
  var peg$c51 = "byVariables:";
  var peg$c52 = "rain";
  var peg$c53 = "\u96E8";
  var peg$c54 = "storm";
  var peg$c55 = "\u5D50";
  var peg$c56 = "snow";
  var peg$c57 = "\u96EA";
  var peg$c58 = "topLeft";
  var peg$c59 = "\u5DE6\u4E0A";
  var peg$c60 = "center";
  var peg$c61 = "\u4E2D\u592E";
  var peg$c62 = "normal";
  var peg$c63 = "\u901A\u5E38";
  var peg$c64 = "\u52A0\u7B97";
  var peg$c65 = "\u4E57\u7B97";
  var peg$c66 = "screen";
  var peg$c67 = "\u30B9\u30AF\u30EA\u30FC\u30F3";
  var peg$c68 = "window";
  var peg$c69 = "\u30A6\u30A3\u30F3\u30C9\u30A6";
  var peg$c70 = "darken";
  var peg$c71 = "\u6697\u304F\u3059\u308B";
  var peg$c72 = "transparent";
  var peg$c73 = "\u900F\u660E";
  var peg$c74 = "top";
  var peg$c75 = "\u4E0A";
  var peg$c76 = "middle";
  var peg$c77 = "\u4E2D";
  var peg$c78 = "bottom";
  var peg$c79 = "\u4E0B";
  var peg$c80 = "//";
  var peg$c81 = "on";
  var peg$c82 = "off";
  var peg$c83 = "true";
  var peg$c84 = "false";
  var peg$c85 = "~";
  var peg$c86 = "-";
  var peg$c87 = "%";
  var peg$c88 = "@";
  var peg$c89 = "#";
  var peg$c90 = ">";
  var peg$c91 = "\"";
  var peg$c92 = " ";
  var peg$c93 = "[";
  var peg$c94 = "]";
  var peg$c95 = "\r\n";
  var peg$c96 = "r";
  var peg$c97 = "\n";

  var peg$r0 = /^[a-dA-D]/;
  var peg$r1 = /^[0-9]/;
  var peg$r2 = /^[^\r\n]/;
  var peg$r3 = /^[^"\r\n]/;

  var peg$e0 = peg$literalExpectation("showText", false);
  var peg$e1 = peg$literalExpectation("switch", false);
  var peg$e2 = peg$classExpectation([["a", "d"], ["A", "D"]], false, false);
  var peg$e3 = peg$literalExpectation("tintScreen", false);
  var peg$e4 = peg$literalExpectation("flashScreen", false);
  var peg$e5 = peg$literalExpectation("shakeScreen", false);
  var peg$e6 = peg$literalExpectation("showPicture", false);
  var peg$e7 = peg$literalExpectation("movePicture", false);
  var peg$e8 = peg$literalExpectation("rotatePicture", false);
  var peg$e9 = peg$literalExpectation("tintPicture", false);
  var peg$e10 = peg$literalExpectation("weather", false);
  var peg$e11 = peg$literalExpectation("playMovie", false);
  var peg$e12 = peg$literalExpectation("changeBackground", false);
  var peg$e13 = peg$literalExpectation("fadeoutScreen", false);
  var peg$e14 = peg$literalExpectation("fadeinScreen", false);
  var peg$e15 = peg$literalExpectation("saveBGM", false);
  var peg$e16 = peg$literalExpectation("resumeBGM", false);
  var peg$e17 = peg$literalExpectation("stopSE", false);
  var peg$e18 = peg$literalExpectation("save", false);
  var peg$e19 = peg$literalExpectation("gameOver", false);
  var peg$e20 = peg$literalExpectation("returnToTitle", false);
  var peg$e21 = peg$literalExpectation("wait", false);
  var peg$e22 = peg$literalExpectation("erasePicture", false);
  var peg$e23 = peg$literalExpectation("fadeoutBGM", false);
  var peg$e24 = peg$literalExpectation("fadeoutBGS", false);
  var peg$e25 = peg$literalExpectation("playBGM", false);
  var peg$e26 = peg$literalExpectation("playBGS", false);
  var peg$e27 = peg$literalExpectation("playME", false);
  var peg$e28 = peg$literalExpectation("playSE", false);
  var peg$e29 = peg$literalExpectation("force:", false);
  var peg$e30 = peg$literalExpectation("speed:", false);
  var peg$e31 = peg$literalExpectation("none", false);
  var peg$e32 = peg$literalExpectation("\u306A\u3057", false);
  var peg$e33 = peg$literalExpectation("scale:", false);
  var peg$e34 = peg$literalExpectation("opacity:", false);
  var peg$e35 = peg$literalExpectation("blend:", false);
  var peg$e36 = peg$literalExpectation("loopX:", false);
  var peg$e37 = peg$literalExpectation("loopY:", false);
  var peg$e38 = peg$literalExpectation("volume:", false);
  var peg$e39 = peg$literalExpectation("pitch:", false);
  var peg$e40 = peg$literalExpectation("pan:", false);
  var peg$e41 = peg$literalExpectation(":", false);
  var peg$e42 = peg$literalExpectation("duration:", false);
  var peg$e43 = peg$literalExpectation("byVariables:", false);
  var peg$e44 = peg$literalExpectation("rain", false);
  var peg$e45 = peg$literalExpectation("\u96E8", false);
  var peg$e46 = peg$literalExpectation("storm", false);
  var peg$e47 = peg$literalExpectation("\u5D50", false);
  var peg$e48 = peg$literalExpectation("snow", false);
  var peg$e49 = peg$literalExpectation("\u96EA", false);
  var peg$e50 = peg$literalExpectation("topLeft", false);
  var peg$e51 = peg$literalExpectation("\u5DE6\u4E0A", false);
  var peg$e52 = peg$literalExpectation("center", false);
  var peg$e53 = peg$literalExpectation("\u4E2D\u592E", false);
  var peg$e54 = peg$literalExpectation("normal", false);
  var peg$e55 = peg$literalExpectation("\u901A\u5E38", false);
  var peg$e56 = peg$literalExpectation("add", false);
  var peg$e57 = peg$literalExpectation("\u52A0\u7B97", false);
  var peg$e58 = peg$literalExpectation("multiply", false);
  var peg$e59 = peg$literalExpectation("\u4E57\u7B97", false);
  var peg$e60 = peg$literalExpectation("screen", false);
  var peg$e61 = peg$literalExpectation("\u30B9\u30AF\u30EA\u30FC\u30F3", false);
  var peg$e62 = peg$literalExpectation("window", false);
  var peg$e63 = peg$literalExpectation("\u30A6\u30A3\u30F3\u30C9\u30A6", false);
  var peg$e64 = peg$literalExpectation("darken", false);
  var peg$e65 = peg$literalExpectation("\u6697\u304F\u3059\u308B", false);
  var peg$e66 = peg$literalExpectation("transparent", false);
  var peg$e67 = peg$literalExpectation("\u900F\u660E", false);
  var peg$e68 = peg$literalExpectation("top", false);
  var peg$e69 = peg$literalExpectation("\u4E0A", false);
  var peg$e70 = peg$literalExpectation("middle", false);
  var peg$e71 = peg$literalExpectation("\u4E2D", false);
  var peg$e72 = peg$literalExpectation("bottom", false);
  var peg$e73 = peg$literalExpectation("\u4E0B", false);
  var peg$e74 = peg$literalExpectation("//", false);
  var peg$e75 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e76 = peg$literalExpectation("on", false);
  var peg$e77 = peg$literalExpectation("off", false);
  var peg$e78 = peg$literalExpectation("false", false);
  var peg$e79 = peg$literalExpectation("~", false);
  var peg$e80 = peg$literalExpectation("-", false);
  var peg$e81 = peg$literalExpectation("%", false);
  var peg$e82 = peg$literalExpectation("@", false);
  var peg$e83 = peg$literalExpectation(">", false);
  var peg$e84 = peg$literalExpectation("\"", false);
  var peg$e85 = peg$literalExpectation(" ", false);
  var peg$e86 = peg$literalExpectation("[", false);
  var peg$e87 = peg$literalExpectation("]", false);
  var peg$e88 = peg$classExpectation(["\r", "\n"], true, false);
  var peg$e89 = peg$literalExpectation("\r\n", false);
  var peg$e90 = peg$literalExpectation("r", false);
  var peg$e91 = peg$literalExpectation("\n", false);
  var peg$e92 = peg$anyExpectation();
  var peg$e93 = peg$classExpectation(["\"", "\r", "\n"], true, false);

  var peg$f0 = function(lines) {
    return lines.filter((line) => line).reduce((b, a) => [
      ...b,
      ...Array.isArray(a) ? a : [a]
    ], [])
  };
  var peg$f1 = function(option, name, text) {
    const [first, ...rest] = text
    return [
      {
        code: 101,
        parameters: option ? option : []
      },
    	{
        code: 401,
        parameters: [first],
        name: name ? name : null
      },
      ...rest.map((param) => {
        return {
          code: 401,
          parameters: [param],
        }
      }),
    ]
  };
  var peg$f2 = function(text) {
    return text
  };
  var peg$f3 = function() {
    return ""
  };
  var peg$f4 = function() {
    return undefined
  };
  var peg$f5 = function(parameters) {
    return parameters
  };
  var peg$f6 = function(text) {
    return { code: 356, parameters: [text] }
  };
  var peg$f7 = function(command) {
    return command
  };
  var peg$f8 = function(code) {
    return {
      code,
      parameters: []
    }
  };
  var peg$f9 = function(numberFrom, val) { return val };
  var peg$f10 = function(numberFrom, numberTo, value) {
    return {
      code: 121,
      parameters: [numberFrom, numberTo || numberFrom, value]
    }
  };
  var peg$f11 = function(key, value) {
    return {
      code: 123,
      parameters: [key.toUpperCase(), value]
    }
  };
  var peg$f12 = function(numberFrom, numberTo, operator, operand) {
    return {
      code: 122,
      parameters: [numberFrom, numberTo || numberFrom, operator, operand]
    }
  };
  var peg$f13 = function(parameters) {
    return {
      code: 223,
      parameters,
    }
  };
  var peg$f14 = function(parameters) {
    return {
      code: 224,
      parameters,
    }
  };
  var peg$f15 = function(parameters) {
    return {
      code: 225,
      parameters,
    }
  };
  var peg$f16 = function(code, parameter) {
    return {
      code,
      parameters: [parameter],
    }
  };
  var peg$f17 = function(parameters) {
    return {
      code: 231,
      parameters,
    }
  };
  var peg$f18 = function(parameters) {
    return {
      code: 232,
      parameters,
    }
  };
  var peg$f19 = function(parameters) {
    return {
      code: 233,
      parameters,
    }
  };
  var peg$f20 = function(parameters) {
    return {
      code: 234,
      parameters,
    }
  };
  var peg$f21 = function(parameters) {
    return {
      code: 236,
      parameters,
    }
  };
  var peg$f22 = function(code, parameters) {
    return {
      code,
      parameters,
    }
  };
  var peg$f23 = function(parameter) {
    return {
      code: 261,
      parameters: [ parameter ],
    }
  };
  var peg$f24 = function(parameters) {
    return {
      code: 284,
      parameters,
    }
  };
  var peg$f25 = function() {
    return 221
  };
  var peg$f26 = function() {
    return 222
  };
  var peg$f27 = function() {
    return 243
  };
  var peg$f28 = function() {
    return 244
  };
  var peg$f29 = function() {
    return 251
  };
  var peg$f30 = function() {
    return 352
  };
  var peg$f31 = function() {
    return 353
  };
  var peg$f32 = function() {
    return 354
  };
  var peg$f33 = function() {
    return 230
  };
  var peg$f34 = function() {
    return 235
  };
  var peg$f35 = function() {
    return 242
  };
  var peg$f36 = function() {
    return 246
  };
  var peg$f37 = function() {
    return 241
  };
  var peg$f38 = function() {
    return 245
  };
  var peg$f39 = function() {
    return 249
  };
  var peg$f40 = function() {
    return 250
  };
  var peg$f41 = function(val) { return val };
  var peg$f42 = function(face, window) {
    return [...(face ? face : ["", 0]), ...window]
  };
  var peg$f43 = function(background, poisition) {
    return [background, poisition]
  };
  var peg$f44 = function(color, duration, wait) {
    return [
      color,
      duration,
      wait,
    ]
  };
  var peg$f45 = function(force, speed, duration, wait) {
    return [
      force,
      speed,
      duration,
      wait,
    ]
  };
  var peg$f46 = function(weather, force, duration, wait) {
    return [
      weather,
      force,
      duration,
      wait,
    ]
  };
  var peg$f47 = function(id) { return "" };
  var peg$f48 = function(id, name, parameters) {
    return [
      id,
      name,
      ...parameters,
    ]
  };
  var peg$f49 = function(id, parameters, duration, wait) {
    return [
      id,
      null,
      ...parameters,
      duration,
      wait,
    ]
  };
  var peg$f50 = function(id, rotateSpeed) {
    return [
      id,
      rotateSpeed,
    ]
  };
  var peg$f51 = function(id, parameters) {
    return [
      id,
      ...parameters,
    ]
  };
  var peg$f52 = function(origin, position, scale, opacity, blend) {
    return [
      origin,
      ...position,
      ...scale,
      opacity,
      blend,
    ]
  };
  var peg$f53 = function() { return "" };
  var peg$f54 = function(name, val) { return val };
  var peg$f55 = function(name, loopX, val) { return val };
  var peg$f56 = function(name, loopX, loopY) {
    return [
      name,
      loopX === null ? 0 : 1,
      loopY === null ? 0 : 1,
      loopX === false ? 0 : loopX,
      loopY === false ? 0 : loopY,
    ]
  };
  var peg$f57 = function(name, volume, pitch, pan) {
    return [{
      name,
      volume,
      pitch,
      pan,
    }]
  };
  var peg$f58 = function(name, index) {
    return [name, index]
  };
  var peg$f59 = function() {
    return ["", 0]
  };
  var peg$f60 = function(r, g, b, a) {
    return [r, g, b, a]
  };
  var peg$f61 = function(duration) {
    return duration
  };
  var peg$f62 = function(wait) {
    return !!wait
  };
  var peg$f63 = function(x, y) {
    return [x, y]
  };
  var peg$f64 = function(byVariable, position) {
    return [byVariable ? 1 : 0, ...position]
  };
  var peg$f65 = function() {
    return 0
  };
  var peg$f66 = function() {
    return 1
  };
  var peg$f67 = function() {
    return 2
  };
  var peg$f68 = function() {
    return 3
  };
  var peg$f69 = function(chars) {
    return chars.join('')
  };
  var peg$f70 = function(num) {
    return parseInt(num.join(''), 0)
  };
  var peg$f71 = function(sign, num) {
    return parseInt((sign ? [sign, ...num] : num).join(''), 0)
  };
  var peg$f72 = function() { return 0 };
  var peg$f73 = function() { return 1 };
  var peg$f74 = function() { return true };
  var peg$f75 = function() { return false };
  var peg$f76 = function() { return null };
  var peg$f77 = function(text) {
    return text.join('')
  };

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$expected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return [peg$savedPos, peg$currPos];
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
  function peg$computeLocation(startPos, endPos) {
    var loc = {};

    if ( peg$VALIDFILENAME ) loc.filename = options.filename;

    var startPosDetails = peg$computePosDetails(startPos);
    loc.start = {
      offset: startPos,
      line: startPosDetails.line,
      column: startPosDetails.column
    };

    var endPosDetails = peg$computePosDetails(endPos);
    loc.end = {
      offset: endPos,
      line: endPosDetails.line,
      column: endPosDetails.column
    };

    return loc;
  }

  function peg$begin() {
    peg$expected.push({ pos: peg$currPos, variants: [] });
  }

  function peg$expect(expected) {
    var top = peg$expected[peg$expected.length - 1];

    if (peg$currPos < top.pos) { return; }

    if (peg$currPos > top.pos) {
      top.pos = peg$currPos;
      top.variants = [];
    }

    top.variants.push(expected);
  }

  function peg$end(invert) {
    var expected = peg$expected.pop();
    var top = peg$expected[peg$expected.length - 1];
    var variants = expected.variants;

    if (top.pos !== expected.pos) { return; }

    if (invert) {
      variants = variants.map(function(e) {
        return e.type === "not" ? e.expected : { type: "not", expected: e };
      });
    }

    Array.prototype.push.apply(top.variants, variants);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$buildError() {
    var expected = peg$expected[0];
    var failPos = expected.pos;

    return peg$buildStructuredError(
      expected.variants,
      failPos < input.length ? input.charAt(failPos) : null,
      failPos < input.length
        ? peg$computeLocation(failPos, failPos + 1)
        : peg$computeLocation(failPos, failPos)
    );
  }

  function peg$parseScenario() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseLines();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseLines();
    }
    peg$savedPos = s0;
    s1 = peg$f0(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseLines() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseMessage();
    if (s0 === peg$FAILED) {
      s0 = peg$parseCommand();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePluginCommand();
        if (s0 === peg$FAILED) {
          s0 = peg$parseComment();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBlankLine();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMessage() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseMessageOption();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseMessageCharacterName();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = [];
    s4 = peg$parseText();
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseText();
      }
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f1(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseText() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    peg$begin();
    s3 = peg$parsePrefices();
    peg$end(true);
    if (s3 === peg$FAILED) {
      s2 = undefined;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTilde();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseChars();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseSpace();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseSpace();
        }
        s5 = peg$parseEndOfLine();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f2(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseTilde();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEndOfLine();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f3();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseComment() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseCommentPrefix();
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseChars();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEndOfLine();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f4();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMessageOption() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseAt();
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e0);
      if (input.substr(peg$currPos, 8) === peg$c0) {
        s2 = peg$c0;
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseSpace();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseSpace();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMessageParameters();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseSpace();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseSpace();
            }
            s6 = peg$parseEndOfLine();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f5(s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMessageCharacterName() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseMessageCharacterPrefix();
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseChars();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseSpace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseSpace();
        }
        s4 = peg$parseEndOfLine();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f2(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePluginCommand() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsePercent();
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseChars();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseSpace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseSpace();
        }
        s4 = peg$parseEndOfLine();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f6(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommand() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseAt();
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_Command();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseSpace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseSpace();
        }
        s4 = peg$parseEndOfLine();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f7(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_Command() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseParameterlessCommand();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSingleNumberParameterCommand();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSwitchCommand();
        if (s0 === peg$FAILED) {
          s0 = peg$parseTintCommand();
          if (s0 === peg$FAILED) {
            s0 = peg$parseFlashCommand();
            if (s0 === peg$FAILED) {
              s0 = peg$parseShakeCommand();
              if (s0 === peg$FAILED) {
                s0 = peg$parseShowPictureCommand();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseMovePictureCommand();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseRotatePictureCommand();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseTintPictureCommand();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseWeatherCommand();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsePlayAudioCommand();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsePlayMovieCommand();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseChangeBackgroundCommand();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseParameterlessCommand() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseParameterlessCommandName();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f8(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSwitchCommand() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e1);
    if (input.substr(peg$currPos, 6) === peg$c1) {
      s1 = peg$c1;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNumber();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseSpace();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseSpace();
          }
          s6 = peg$parseTilde();
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parseSpace();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseSpace();
            }
            s8 = peg$parseNumber();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s4;
              s4 = peg$f9(s3, s8);
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = [];
          s6 = peg$parseSpace();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseSpace();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseSwitch();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f10(s3, s4, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e1);
      if (input.substr(peg$currPos, 6) === peg$c1) {
        s1 = peg$c1;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSpace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSpace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          rule$expects(peg$e2);
          if (peg$r0.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseSpace();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseSpace();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSwitch();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f11(s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseVariableCommand() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNumber();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseSpace();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseSpace();
          }
          s6 = peg$parseTilde();
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parseSpace();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseSpace();
            }
            s8 = peg$parseNumber();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s4;
              s4 = peg$f9(s3, s8);
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = [];
          s6 = peg$parseSpace();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseSpace();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c3) {
              s6 = peg$c3;
              peg$currPos += 3;
            } else {
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c4) {
                s6 = peg$c4;
                peg$currPos += 3;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c5) {
                  s6 = peg$c5;
                  peg$currPos += 8;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  if (input.substr(peg$currPos, 8) === peg$c6) {
                    s6 = peg$c6;
                    peg$currPos += 8;
                  } else {
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c7) {
                      s6 = peg$c7;
                      peg$currPos += 6;
                    } else {
                      s6 = peg$FAILED;
                    }
                    if (s6 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6) === peg$c8) {
                        s6 = peg$c8;
                        peg$currPos += 6;
                      } else {
                        s6 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parseSpace();
              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseSpace();
                }
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c2) {
                  s8 = peg$c2;
                  peg$currPos += 8;
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c9) {
                    s8 = peg$c9;
                    peg$currPos += 6;
                  } else {
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    if (input.substr(peg$currPos, 11) === peg$c10) {
                      s8 = peg$c10;
                      peg$currPos += 11;
                    } else {
                      s8 = peg$FAILED;
                    }
                  }
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f12(s3, s4, s6, s8);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTintCommand() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e3);
    if (input.substr(peg$currPos, 10) === peg$c11) {
      s1 = peg$c11;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseTintParameters();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f13(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFlashCommand() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e4);
    if (input.substr(peg$currPos, 11) === peg$c12) {
      s1 = peg$c12;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFlashParameters();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseShakeCommand() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e5);
    if (input.substr(peg$currPos, 11) === peg$c13) {
      s1 = peg$c13;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseShakeParameters();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f15(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSingleNumberParameterCommand() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseSingleNumberParameterCommandName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNumber();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f16(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseShowPictureCommand() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e6);
    if (input.substr(peg$currPos, 11) === peg$c14) {
      s1 = peg$c14;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseShowPictureParameters();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f17(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMovePictureCommand() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e7);
    if (input.substr(peg$currPos, 11) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMovePictureParameters();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f18(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRotatePictureCommand() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e8);
    if (input.substr(peg$currPos, 13) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseRotatePictureParameters();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f19(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTintPictureCommand() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e9);
    if (input.substr(peg$currPos, 11) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseTintPictureParameters();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f20(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWeatherCommand() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e10);
    if (input.substr(peg$currPos, 7) === peg$c18) {
      s1 = peg$c18;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWeatherParameters();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f21(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePlayAudioCommand() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsePlayAudioCommandName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePlayAudioParameters();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f22(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePlayMovieCommand() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e11);
    if (input.substr(peg$currPos, 9) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseString();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f23(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseChangeBackgroundCommand() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e12);
    if (input.substr(peg$currPos, 16) === peg$c20) {
      s1 = peg$c20;
      peg$currPos += 16;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseChangeBackgroundParameters();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f24(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParameterlessCommandName() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e13);
    if (input.substr(peg$currPos, 13) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f25();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e14);
      if (input.substr(peg$currPos, 12) === peg$c22) {
        s1 = peg$c22;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e15);
        if (input.substr(peg$currPos, 7) === peg$c23) {
          s1 = peg$c23;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f27();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          rule$expects(peg$e16);
          if (input.substr(peg$currPos, 9) === peg$c24) {
            s1 = peg$c24;
            peg$currPos += 9;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f28();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            rule$expects(peg$e17);
            if (input.substr(peg$currPos, 6) === peg$c25) {
              s1 = peg$c25;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f29();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              rule$expects(peg$e18);
              if (input.substr(peg$currPos, 4) === peg$c26) {
                s1 = peg$c26;
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f30();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                rule$expects(peg$e19);
                if (input.substr(peg$currPos, 8) === peg$c27) {
                  s1 = peg$c27;
                  peg$currPos += 8;
                } else {
                  s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f31();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  rule$expects(peg$e20);
                  if (input.substr(peg$currPos, 13) === peg$c28) {
                    s1 = peg$c28;
                    peg$currPos += 13;
                  } else {
                    s1 = peg$FAILED;
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f32();
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSingleNumberParameterCommandName() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e21);
    if (input.substr(peg$currPos, 4) === peg$c29) {
      s1 = peg$c29;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f33();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e22);
      if (input.substr(peg$currPos, 12) === peg$c30) {
        s1 = peg$c30;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f34();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e23);
        if (input.substr(peg$currPos, 10) === peg$c31) {
          s1 = peg$c31;
          peg$currPos += 10;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f35();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          rule$expects(peg$e24);
          if (input.substr(peg$currPos, 10) === peg$c32) {
            s1 = peg$c32;
            peg$currPos += 10;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f36();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parsePlayAudioCommandName() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e25);
    if (input.substr(peg$currPos, 7) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f37();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e26);
      if (input.substr(peg$currPos, 7) === peg$c34) {
        s1 = peg$c34;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f38();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e27);
        if (input.substr(peg$currPos, 6) === peg$c35) {
          s1 = peg$c35;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f39();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          rule$expects(peg$e28);
          if (input.substr(peg$currPos, 6) === peg$c36) {
            s1 = peg$c36;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f40();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseMessageParameters() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseSpace();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parseSpace();
    }
    s3 = peg$parseFaceParameter();
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$parseSpace();
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseSpace();
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s1;
        s1 = peg$f41(s3);
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseMessageWindowParameter();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f42(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMessageWindowParameter() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseMessageWindowBackground();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMessageWindowPosition();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f43(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTintParameters() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseColorParameter();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDurationParameter();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWaitParameter();
          peg$savedPos = s0;
          s0 = peg$f44(s1, s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFlashParameters() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseColorParameter();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDurationParameter();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWaitParameter();
          peg$savedPos = s0;
          s0 = peg$f44(s1, s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseShakeParameters() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e29);
    if (input.substr(peg$currPos, 6) === peg$c37) {
      s1 = peg$c37;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSpace();
      }
      s3 = peg$parseNumber();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseSpace();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSpace();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          rule$expects(peg$e30);
          if (input.substr(peg$currPos, 6) === peg$c38) {
            s5 = peg$c38;
            peg$currPos += 6;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseSpace();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseSpace();
            }
            s7 = peg$parseNumber();
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parseSpace();
              if (s9 !== peg$FAILED) {
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parseSpace();
                }
              } else {
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parseDurationParameter();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseWaitParameter();
                  peg$savedPos = s0;
                  s0 = peg$f45(s3, s7, s9, s10);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWeatherParameters() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseWeatherType();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        rule$expects(peg$e29);
        if (input.substr(peg$currPos, 6) === peg$c37) {
          s3 = peg$c37;
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSpace();
          }
          s5 = peg$parseNumber();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseSpace();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSpace();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseDurationParameter();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseWaitParameter();
                peg$savedPos = s0;
                s0 = peg$f46(s1, s5, s7, s8);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseShowPictureParameters() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseNumber();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseString();
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          rule$expects(peg$e31);
          if (input.substr(peg$currPos, 4) === peg$c39) {
            s4 = peg$c39;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            rule$expects(peg$e32);
            if (input.substr(peg$currPos, 2) === peg$c40) {
              s4 = peg$c40;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$f47(s1);
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSpace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseSpace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsePictureParameters();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f48(s1, s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMovePictureParameters() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseNumber();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePictureParameters();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSpace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseSpace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDurationParameter();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseWaitParameter();
              peg$savedPos = s0;
              s0 = peg$f49(s1, s3, s5, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRotatePictureParameters() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseNumber();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        rule$expects(peg$e30);
        if (input.substr(peg$currPos, 6) === peg$c38) {
          s3 = peg$c38;
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSpace();
          }
          s5 = peg$parseSignedNumber();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f50(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTintPictureParameters() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseNumber();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseTintParameters();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f51(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePictureParameters() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseOriginType();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePicturePositionParameter();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseSpace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseSpace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            rule$expects(peg$e33);
            if (input.substr(peg$currPos, 6) === peg$c41) {
              s5 = peg$c41;
              peg$currPos += 6;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSpace();
              }
              s7 = peg$parsePointParameter();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parseSpace();
                if (s9 !== peg$FAILED) {
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseSpace();
                  }
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  rule$expects(peg$e34);
                  if (input.substr(peg$currPos, 8) === peg$c42) {
                    s9 = peg$c42;
                    peg$currPos += 8;
                  } else {
                    s9 = peg$FAILED;
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = [];
                    s11 = peg$parseSpace();
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$parseSpace();
                    }
                    s11 = peg$parseNumber();
                    if (s11 !== peg$FAILED) {
                      s12 = [];
                      s13 = peg$parseSpace();
                      if (s13 !== peg$FAILED) {
                        while (s13 !== peg$FAILED) {
                          s12.push(s13);
                          s13 = peg$parseSpace();
                        }
                      } else {
                        s12 = peg$FAILED;
                      }
                      if (s12 !== peg$FAILED) {
                        rule$expects(peg$e35);
                        if (input.substr(peg$currPos, 6) === peg$c43) {
                          s13 = peg$c43;
                          peg$currPos += 6;
                        } else {
                          s13 = peg$FAILED;
                        }
                        if (s13 !== peg$FAILED) {
                          s14 = [];
                          s15 = peg$parseSpace();
                          while (s15 !== peg$FAILED) {
                            s14.push(s15);
                            s15 = peg$parseSpace();
                          }
                          s15 = peg$parseBlendType();
                          if (s15 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f52(s1, s3, s7, s11, s15);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseChangeBackgroundParameters() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseString();
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      rule$expects(peg$e31);
      if (input.substr(peg$currPos, 4) === peg$c39) {
        s2 = peg$c39;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        rule$expects(peg$e32);
        if (input.substr(peg$currPos, 2) === peg$c40) {
          s2 = peg$c40;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$f53();
      }
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseSpace();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseSpace();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        rule$expects(peg$e36);
        if (input.substr(peg$currPos, 6) === peg$c44) {
          s4 = peg$c44;
          peg$currPos += 6;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseSpace();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseSpace();
          }
          s6 = peg$parseBackgroundLoopParameter();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s2;
            s2 = peg$f54(s1, s6);
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parseSpace();
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseSpace();
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        rule$expects(peg$e37);
        if (input.substr(peg$currPos, 6) === peg$c45) {
          s5 = peg$c45;
          peg$currPos += 6;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseSpace();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseSpace();
          }
          s7 = peg$parseBackgroundLoopParameter();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f55(s1, s2, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f56(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePlayAudioParameters() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseString();
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      rule$expects(peg$e31);
      if (input.substr(peg$currPos, 4) === peg$c39) {
        s2 = peg$c39;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        rule$expects(peg$e32);
        if (input.substr(peg$currPos, 2) === peg$c40) {
          s2 = peg$c40;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$f53();
      }
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSpace();
      }
      rule$expects(peg$e38);
      if (input.substr(peg$currPos, 7) === peg$c46) {
        s3 = peg$c46;
        peg$currPos += 7;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseSpace();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseSpace();
        }
        s5 = peg$parseNumber();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseSpace();
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseSpace();
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            rule$expects(peg$e39);
            if (input.substr(peg$currPos, 6) === peg$c47) {
              s7 = peg$c47;
              peg$currPos += 6;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parseSpace();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parseSpace();
              }
              s9 = peg$parseNumber();
              if (s9 !== peg$FAILED) {
                s10 = [];
                s11 = peg$parseSpace();
                if (s11 !== peg$FAILED) {
                  while (s11 !== peg$FAILED) {
                    s10.push(s11);
                    s11 = peg$parseSpace();
                  }
                } else {
                  s10 = peg$FAILED;
                }
                if (s10 !== peg$FAILED) {
                  rule$expects(peg$e40);
                  if (input.substr(peg$currPos, 4) === peg$c48) {
                    s11 = peg$c48;
                    peg$currPos += 4;
                  } else {
                    s11 = peg$FAILED;
                  }
                  if (s11 !== peg$FAILED) {
                    s12 = [];
                    s13 = peg$parseSpace();
                    while (s13 !== peg$FAILED) {
                      s12.push(s13);
                      s13 = peg$parseSpace();
                    }
                    s13 = peg$parseSignedNumber();
                    if (s13 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f57(s1, s5, s9, s13);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFaceParameter() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseString();
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e41);
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c49;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseSpace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseSpace();
        }
        s4 = peg$parseSignedNumber();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f58(s1, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e31);
      if (input.substr(peg$currPos, 4) === peg$c39) {
        s1 = peg$c39;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        rule$expects(peg$e32);
        if (input.substr(peg$currPos, 2) === peg$c40) {
          s1 = peg$c40;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f59();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseColorParameter() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseBracketOpen();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSpace();
      }
      s3 = peg$parseSignedNumber();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseSpace();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSpace();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSignedNumber();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseSpace();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseSpace();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseSignedNumber();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parseSpace();
                if (s9 !== peg$FAILED) {
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseSpace();
                  }
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseSignedNumber();
                  if (s9 !== peg$FAILED) {
                    s10 = [];
                    s11 = peg$parseSpace();
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$parseSpace();
                    }
                    s11 = peg$parseBracketClose();
                    if (s11 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f60(s3, s5, s7, s9);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDurationParameter() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e42);
    if (input.substr(peg$currPos, 9) === peg$c50) {
      s1 = peg$c50;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSpace();
      }
      s3 = peg$parseNumber();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f61(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWaitParameter() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseSpace();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSpace();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      rule$expects(peg$e21);
      if (input.substr(peg$currPos, 4) === peg$c29) {
        s3 = peg$c29;
        peg$currPos += 4;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    peg$savedPos = s0;
    s1 = peg$f62(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsePointParameter() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseBracketOpen();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSpace();
      }
      s3 = peg$parseSignedNumber();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseSpace();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseSpace();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSignedNumber();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseSpace();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseSpace();
            }
            s7 = peg$parseBracketClose();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f63(s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePicturePositionParameter() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    rule$expects(peg$e43);
    if (input.substr(peg$currPos, 12) === peg$c51) {
      s2 = peg$c51;
      peg$currPos += 12;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseSpace();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseSpace();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parsePointParameter();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f64(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBackgroundLoopParameter() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseSignedNumber();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFalse();
    }

    return s0;
  }

  function peg$parseWeatherType() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e44);
    if (input.substr(peg$currPos, 4) === peg$c52) {
      s1 = peg$c52;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e45);
      if (input.charCodeAt(peg$currPos) === 38632) {
        s1 = peg$c53;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f65();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e46);
      if (input.substr(peg$currPos, 5) === peg$c54) {
        s1 = peg$c54;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        rule$expects(peg$e47);
        if (input.charCodeAt(peg$currPos) === 23888) {
          s1 = peg$c55;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f66();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e48);
        if (input.substr(peg$currPos, 4) === peg$c56) {
          s1 = peg$c56;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          rule$expects(peg$e49);
          if (input.charCodeAt(peg$currPos) === 38634) {
            s1 = peg$c57;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f67();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          rule$expects(peg$e31);
          if (input.substr(peg$currPos, 4) === peg$c39) {
            s1 = peg$c39;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            rule$expects(peg$e32);
            if (input.substr(peg$currPos, 2) === peg$c40) {
              s1 = peg$c40;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f68();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseOriginType() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e50);
    if (input.substr(peg$currPos, 7) === peg$c58) {
      s1 = peg$c58;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e51);
      if (input.substr(peg$currPos, 2) === peg$c59) {
        s1 = peg$c59;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f65();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e52);
      if (input.substr(peg$currPos, 6) === peg$c60) {
        s1 = peg$c60;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        rule$expects(peg$e53);
        if (input.substr(peg$currPos, 2) === peg$c61) {
          s1 = peg$c61;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f66();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseBlendType() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e54);
    if (input.substr(peg$currPos, 6) === peg$c62) {
      s1 = peg$c62;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e55);
      if (input.substr(peg$currPos, 2) === peg$c63) {
        s1 = peg$c63;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f65();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e56);
      if (input.substr(peg$currPos, 3) === peg$c4) {
        s1 = peg$c4;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        rule$expects(peg$e57);
        if (input.substr(peg$currPos, 2) === peg$c64) {
          s1 = peg$c64;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f66();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e58);
        if (input.substr(peg$currPos, 8) === peg$c6) {
          s1 = peg$c6;
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          rule$expects(peg$e59);
          if (input.substr(peg$currPos, 2) === peg$c65) {
            s1 = peg$c65;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f67();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          rule$expects(peg$e60);
          if (input.substr(peg$currPos, 6) === peg$c66) {
            s1 = peg$c66;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            rule$expects(peg$e61);
            if (input.substr(peg$currPos, 5) === peg$c67) {
              s1 = peg$c67;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f68();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseMessageWindowBackground() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e62);
    if (input.substr(peg$currPos, 6) === peg$c68) {
      s1 = peg$c68;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e63);
      if (input.substr(peg$currPos, 5) === peg$c69) {
        s1 = peg$c69;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f65();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e64);
      if (input.substr(peg$currPos, 6) === peg$c70) {
        s1 = peg$c70;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        rule$expects(peg$e65);
        if (input.substr(peg$currPos, 4) === peg$c71) {
          s1 = peg$c71;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f66();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e66);
        if (input.substr(peg$currPos, 11) === peg$c72) {
          s1 = peg$c72;
          peg$currPos += 11;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          rule$expects(peg$e67);
          if (input.substr(peg$currPos, 2) === peg$c73) {
            s1 = peg$c73;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f67();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseMessageWindowPosition() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e68);
    if (input.substr(peg$currPos, 3) === peg$c74) {
      s1 = peg$c74;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e69);
      if (input.charCodeAt(peg$currPos) === 19978) {
        s1 = peg$c75;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f65();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e70);
      if (input.substr(peg$currPos, 6) === peg$c76) {
        s1 = peg$c76;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        rule$expects(peg$e71);
        if (input.charCodeAt(peg$currPos) === 20013) {
          s1 = peg$c77;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f66();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e72);
        if (input.substr(peg$currPos, 6) === peg$c78) {
          s1 = peg$c78;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          rule$expects(peg$e73);
          if (input.charCodeAt(peg$currPos) === 19979) {
            s1 = peg$c79;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f67();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parsePrefices() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseAt();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePercent();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMessageCharacterPrefix();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCommentPrefix();
        }
      }
    }

    return s0;
  }

  function peg$parseMessageCharacterPrefix() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseGreaterThan();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSpace();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommentPrefix() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e74);
    if (input.substr(peg$currPos, 2) === peg$c80) {
      s0 = peg$c80;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseString() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseQuote();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseQuotedChar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseQuotedChar();
      }
      s3 = peg$parseQuote();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f69(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumber() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    rule$expects(peg$e75);
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        rule$expects(peg$e75);
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f70(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSignedNumber() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseMinus();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    rule$expects(peg$e75);
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        rule$expects(peg$e75);
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f71(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSwitch() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e76);
    if (input.substr(peg$currPos, 2) === peg$c81) {
      s1 = peg$c81;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f72();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e77);
      if (input.substr(peg$currPos, 3) === peg$c82) {
        s1 = peg$c82;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f73();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseBoolean() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseTrue();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFalse();
    }

    return s0;
  }

  function peg$parseTrue() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c83) {
      s1 = peg$c83;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f74();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFalse() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e78);
    if (input.substr(peg$currPos, 5) === peg$c84) {
      s1 = peg$c84;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f75();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBlankLine() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseLinebreak();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f76();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseChars() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseChar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseChar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f77(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTilde() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e79);
    if (input.charCodeAt(peg$currPos) === 126) {
      s0 = peg$c85;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMinus() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e80);
    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c86;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePercent() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e81);
    if (input.charCodeAt(peg$currPos) === 37) {
      s0 = peg$c87;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAt() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e82);
    if (input.charCodeAt(peg$currPos) === 64) {
      s0 = peg$c88;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumbersign() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (input.charCodeAt(peg$currPos) === 35) {
      s0 = peg$c89;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGreaterThan() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e83);
    if (input.charCodeAt(peg$currPos) === 62) {
      s0 = peg$c90;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCoron() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (input.charCodeAt(peg$currPos) === 58) {
      s0 = peg$c49;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQuote() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e84);
    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c91;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSpace() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e85);
    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c92;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBracketOpen() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e86);
    if (input.charCodeAt(peg$currPos) === 91) {
      s0 = peg$c93;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBracketClose() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e87);
    if (input.charCodeAt(peg$currPos) === 93) {
      s0 = peg$c94;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseChar() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e88);
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEndOfLine() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseLinebreak();
    if (s0 === peg$FAILED) {
      s0 = peg$parseEndOfInput();
    }

    return s0;
  }

  function peg$parseLinebreak() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e89);
    if (input.substr(peg$currPos, 2) === peg$c95) {
      s0 = peg$c95;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      rule$expects(peg$e90);
      if (input.charCodeAt(peg$currPos) === 114) {
        s0 = peg$c96;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        rule$expects(peg$e91);
        if (input.charCodeAt(peg$currPos) === 10) {
          s0 = peg$c97;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseEndOfInput() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    peg$begin();
    rule$expects(peg$e92);
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    peg$end(true);
    if (s1 === peg$FAILED) {
      s0 = undefined;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQuotedChar() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e93);
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  peg$begin();
  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$expect(peg$endExpectation());
    }

    throw peg$buildError();
  }
}

export {
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};

export default {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
